buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = 'com.teammoeg'
archivesBaseName = 'ImmersiveIndustry'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
	mavenLocal()
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "DVS1 Maven FS"
        url = "https://dvs1.progwml6.com/files/maven"
    }
	maven {
        name = "teammoeg maven"
        url = "http://server.teammoeg.com:8888/releases"
    }
}
sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    'src/generated/resources'
            ]
        }
    }
	datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}
minecraft {

    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
			
			arg "-mixin.config=" + "immersiveindustry.mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                immersiveindustry {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
			
            property 'forge.logging.markers', 'REGISTRIES'
			
			arg "-mixin.config=" + "immersiveindustry.mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                immersiveindustry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			arg "-mixin.config=" + "immersiveindustry.mixins.json"

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'immersiveindustry', '--all', '--output', file('src/generated/resources/'),'validate', '--existing', file('src/main/resources/'), '--existing-mod', 'immersiveengineering'

            mods {
                immersiveindustry {
                	source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
//    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.5-5.0.7-143")
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.5-5.0.7-143:datagen")
	
	compile fg.deobf('com.cannolicatfish:Project-Rankine:1.16.5-1.3')
    implementation fg.deobf('com.cannolicatfish:Project-Rankine:1.16.5-1.3')


    compile fg.deobf("mezz.jei:jei-1.16.5:7.6.4.88")

    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
    testAnnotationProcessor "org.spongepowered:mixin:0.8.2:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Immersive Industry",
                "Specification-Vendor"    : "TeamMoeg",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "TeamMoeg",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "immersiveindustry.mixins.json"
        ])
    }
    finalizedBy('reobfJar')
}

def getPrivateString(String key) {
    File propFile = file("private.properties")
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if ((props[key]).isEmpty()) {
            return "NULL"
        } else return props[key]
    } else {
        return "NULL"
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

javadoc {
    source = [sourceSets.main.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')
    ignoreFailures = true
    include '**/*.java'
}
String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "ImmersiveIndustry ${version}"
                temp = "<span style=\"font-size: 18px; color: #333399;\">ImmersiveIndustry v${mod_version}</span>&nbsp;&nbsp;<em>for Minecraft ${mc_version}</em><br/>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp<br/>"
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += temp
            lineCount++
        }
    }
    return str
}
curseforge {
    project {
        def envApiKey = System.getenv('CURSEFORGE_API_KEY')
        apiKey = envApiKey == null ? 'nope' : envApiKey

        id = '542053' // Immersive Industry
        changelog = getChangelogText()

        changelogType = 'markdown'

        releaseType = 'release' // Default versions are marked release

        addGameVersion "1.16.5"

        mainArtifact (jar) {
            relations {
                requiredDependency 'immersive-engineering'
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            name = "TeamMoeg"
            url = "http://server.teammoeg.com:8888/releases"
            credentials {
                username = getPrivateString("mavenUser")
                password = getPrivateString("mavenToken")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
